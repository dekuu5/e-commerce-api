// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)  // Enum: ADMIN or USER
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  cart      Cart?
  reviews   Review[]
  wishlist  Wishlist?

  ShippingAddress ShippingAddress[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reviews     Review[]
  cartProducts CartProduct[]
  orderProducts OrderProduct[]

  Wishlist Wishlist[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  products  Product[]
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    Int
  total     Float
  status    OrderStatus  // Enum: PENDING, COMPLETED, CANCELLED
  user      User     @relation(fields: [userId], references: [id])
  products  OrderProduct[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Payment Payment[]

  ShippingAddress ShippingAddress[]
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int @unique
  user      User     @relation(fields: [userId], references: [id])
  products  CartProduct[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartProduct {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int
  paymentMethod String   // e.g., Credit Card, PayPal
  amount        Float
  status        PaymentStatus  // Enum: PENDING, SUCCESS, FAILED
  transactionId String?
  order         Order    @relation(fields: [orderId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ShippingAddress {
  id           Int      @id @default(autoincrement())
  userId       Int
  orderId      Int
  addressLine1 String
  addressLine2 String?
  city         String
  postalCode   String
  country      String
  user         User     @relation(fields: [userId], references: [id])
  order        Order    @relation(fields: [orderId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int @unique
  user      User     @relation(fields: [userId], references: [id])
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
